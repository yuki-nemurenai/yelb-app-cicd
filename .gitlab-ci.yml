---

stages:
  - lint
  - build
  - test
  - cleanup
  - push
  - deploy

lint:dockerfile:
  stage: lint
  image:
    name: hadolint/hadolint:latest-alpine
    entrypoint: [""]
  script:
    - hadolint --config hadolint-ignore.yaml yelb-appserver/Dockerfile
    - hadolint --config hadolint-ignore.yaml yelb-ui/Dockerfile

lint:yaml:
  stage: lint
  image:
    name: cytopia/yamllint
    entrypoint: ["/bin/ash", "-c"]
  script:
    - yamllint -c yamllint-rules.yaml -f colored .

lint:helm:
  stage: lint
  image:
    name: alpine/helm:3.11.1
    entrypoint: [""]
  script:
    - helm lint .helm/

build:yelb-appserver:
  stage: build
  script:
    - cd yelb-appserver/
    # yamllint disable-line rule:line-length
    - docker build . -t $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_BACKEND:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID

build:yelb-ui:
  stage: build
  script:
    - cd yelb-ui/
    # yamllint disable-line rule:line-length
    - docker build . -t $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID

test:
  stage: test
  image:
    name: docker/compose:1.27.4
    entrypoint: [""]
  script:
    - docker-compose
        -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID"
      up
        --abort-on-container-exit
        --exit-code-from curl
        --quiet-pull

cleanup:
  stage: cleanup
  image:
    name: docker/compose:1.27.4
    entrypoint: [""]
  script:
    - docker-compose -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID" down
  when: always

push:
  stage: push
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    # yamllint disable-line rule:line-length
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_BACKEND:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
    # yamllint disable-line rule:line-length
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
  only:
    - main

deploy:
  stage: deploy
  image: centosadmin/kubernetes-helm:v3.6.3
  before_script:
    - >
      curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh |
      bash
    - export PATH=$PATH:/root/yandex-cloud/bin
    - yc config profile create cicd
    - yc config set folder-id $YC_FOLDER_ID
    - yc config set cloud-id $YC_CLOUD_ID
    - yc config set token $YC_TOKEN
    - >
      yc managed-kubernetes cluster
      get-credentials $K8S_CLUSTER_NAME --external
    - kubectl cluster-info
  script:
    - >
      kubectl create namespace $K8S_APP_NAMESPACE --dry-run=client -o yaml
      | kubectl apply -f -
    - >
      kubectl create secret tls yelb-tls -n $K8S_APP_NAMESPACE
      --cert=certs/fullchain.pem
      --key=certs/privkey.pem
      --dry-run=client -o yaml | kubectl apply -f -
    - >
      kubectl create secret -n $K8S_APP_NAMESPACE
      docker-registry my-registry-secret
      --docker-server=$CI_REGISTRY
      --docker-username=$K8S_PULL_TOKEN
      --docker-password=$K8S_PULL_PASSWORD
      --docker-email=$K8S_PULL_EMAIL
      --dry-run=client -o yaml | kubectl apply -f -
    - helm upgrade --install $CI_PROJECT_PATH_SLUG .helm
        --set imageTag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --set yelbrackenv=$YELB_RACK_ENV
        --set yelbdbhost=$YELB_DB_SERVER_ENDPOINT
        --set yelbdbpassword=$YELB_DB_SERVER_PASSWORD
        --set yelbdbuser=$YELB_DB_SERVER_USER
        --set yelbdbport=$YELB_DB_SERVER_PORT
        --set yelbdbname=$YELB_DB_NAME
        --set redishost=$YELB_REDIS_ENDPOINT
        --set redisport=$YELB_REDIS_PORT
        --set redispassword=$YELB_REDIS_PASSWORD
        --wait
        --timeout 300s
        --atomic
        --debug
        --namespace $K8S_APP_NAMESPACE
  after_script:
    - kubectl -n ingress-nginx get svc
